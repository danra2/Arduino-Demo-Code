#define BAUDRATE (9600)
#include <SoftwareSerial.h>
#define ARDUINO_RX 5//should connect to TX of the Serial MP3 Player module
#define ARDUINO_TX 6//connect to RX of the module
SoftwareSerial mySerial(ARDUINO_RX, ARDUINO_TX);
static int8_t Send_buf[8] = {0} ;

#define CMD_SEL_DEV 0X09
#define DEV_TF 0X02
#define CMD_PLAY_W_VOL 0X22
#define CMD_PLAY 0X0D
#define CMD_PAUSE 0X0E
#define CMD_PREVIOUS 0X02
#define CMD_NEXT 0X01

int trigPin = 8;  
int echoPin = 7;
int pirPin = 2;   
int ledPin = 13;
    
long duration, cm, inches;
long turnoff;
int calibrationTime = 30; 
bool motionStatus = false;
bool distanceSet = false;
int value;

//the time when the sensor outputs a low impulse
long unsigned int lowIn;         

//the amount of milliseconds the sensor has to be low 
//before we assume all motion has stopped
boolean lockLow = true;
boolean takeLowTime;  

void setup() {
  Serial.begin(BAUDRATE);
  while (!Serial)
   {
     ; /* wait for serial port to connect. Needed for native USB port only */
   }
  //Serial Port begin
  //Define inputs and outputs
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(pirPin, INPUT);
  digitalWrite(pirPin, LOW);
  //give the sensor some time to calibrate
  Serial.print("calibrating sensor ");
    for(int i = 0; i < calibrationTime; i++){
      Serial.print(".");
      delay(1000);
      }
    Serial.println(" done");
    Serial.println("SENSOR ACTIVE");
    delay(50);
}
void loop()
{
  //This Method will run on loop and constantly check the status of whether or not music is currently playing, and what the value from the Ultrasonic sensor is emitting, but also whether or not the motion sensor is active.
  detect();
  if(motionStatus == true and distanceSet == true){
      if(value <= 33)
      {
        sendCommand(CMD_PLAY_W_VOL, 0X1E03);//play the third track with volume 30 class
        Serial.println("First sound track.");
      }
      if(value >= 37){
        sendCommand(CMD_PLAY_W_VOL, 0X1E01);//play the third track with volume 30 class
        Serial.println("Second sound track.");
      } 
    distanceSet = false;
  }
}

void getDistance(void) {
  //Distance method that gets CM values from the Ultrasonic distance sensor.
  digitalWrite(trigPin, LOW);
  delayMicroseconds(5);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  distanceSet = true;
  // Read the signal from the sensor: a HIGH pulse whose
  // duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object.
  pinMode(echoPin, INPUT);
  duration = pulseIn(echoPin, HIGH);
 
  // Convert the time into a distance
  cm = (duration/2) / 29.1;     // Divide by 29.1 or multiply by 0.0343
  
  Serial.print(cm);
  Serial.println("cm");
  delay(800);
  while(distanceSet = true and cm < 100){
    value = cm;
    return;
  }
  return;
}
void detect(void){
if(digitalRead(pirPin) == HIGH){
  digitalWrite(ledPin, HIGH);   //the led visualizes the sensors output pin state
  if(lockLow){  
    //makes sure we wait for a transition to LOW before any further output is made:
    lockLow = false;            
    startMusic();
    getDistance();
    motionStatus = true;
    delay(50);
    turnoff = millis();
  }         
  takeLowTime = true;
}
if(millis() > turnoff){         
  if(takeLowTime){
      lowIn = millis();          //save the time of the transition from high to LOW
      takeLowTime = false;
    }
  if(!lockLow && millis() - lowIn > 1000){  
     lockLow = true;  
     getDistance();                      
     motionStatus = false;
     delay(50);
   }
  }
}
void sendCommand(int8_t command, int16_t dat)
{
  //Runs the different commands for sending bit transfers throughout the loop depending on the detect method results. 
  delay(20);
  Send_buf[0] = 0x7e; //starting byte
  Send_buf[1] = 0xff; //version
  Send_buf[2] = 0x06; //the number of bytes of the command without starting byte and ending byte
  Send_buf[3] = command; //
  Send_buf[4] = 0x00;//0x00 = no feedback, 0x01 = feedback
  Send_buf[5] = (int8_t)(dat >> 8);//datah
  Send_buf[6] = (int8_t)(dat); //datal
  Send_buf[7] = 0xef; //ending byte
  for(uint8_t i=0; i<8; i++)//
  {
    mySerial.write(Send_buf[i]) ;
  }
}
//Sets up the music on boot up of the program.
void startMusic(void){
    mySerial.begin(9600);
    Serial.begin(9600);
    delay(500);//Wait chip initialization is complete
    sendCommand(CMD_SEL_DEV, DEV_TF);//select the TF card  
    delay(200);//wait for 200ms
//  sendCommand(CMD_PLAY_W_VOL, 0X1E01);//play the first song with volume 30 class
}
